apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile

project.ext.envConfigFiles = [
    developmentdebug: "config/env/development.android.env",
    developmentrelease: "config/env/development.android.env",

    stagingdebug: "config/env/staging.android.env",
    stagingrelease: "config/env/staging.android.env",

    productiondebug: "config/env/production.android.env",
    productionrelease: "config/env/production.android.env"
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

def gAppVersionCode = Integer.valueOf(System.env.CI_BUILD_NUMBER ?: 1) * 1000

def gAppVersionName = "0.0.1"
def gAppVersionHash = System.env.CI_BUILD_REVISION ?: 'NA'
def gAppVersionBranch = System.env.CI_BUILD_BRANCH ?: 'NA'

def gApplicationPackage="com.rnapp"
def gApplicationId = project.ext.env.get("APP_ID_ANDROID")
def gAppDisplayName = project.ext.env.get("DISPLAY_NAME")

if (gApplicationId == null) {
    gApplicationId = "APPLICATION_ID_NOT_SET"
}

if (gAppDisplayName == null) {
    gAppDisplayName = "APPLICATION_DISPLAY_NAME_NOT_SET"
}

println ("[INFO] Building using .env values:")
println ("[INFO]   >gApplicationId :" + gApplicationId)
println ("[INFO]   >gAppDisplayName:" + gAppDisplayName)

project.ext.react = [
    enableHermes: true,  // clean and rebuild if changing
]

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.rnapp"
    defaultConfig {
        applicationId gApplicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gAppVersionCode
        versionName gAppVersionName
        setProperty("archivesBaseName", "${applicationId}-v${versionName}(${versionCode})")
        multiDexEnabled true
        resValue "string", "build_config_package", gApplicationPackage
        resValue "string", "app_version_code", "" + gAppVersionCode
        resValue "string", "app_version_name", gAppVersionName
        resValue "string", "app_version_hash", gAppVersionHash
        resValue "string", "app_version_branch", gAppVersionBranch
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }


    flavorDimensions "main"

    productFlavors {
        development {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig signingConfigs.debug

            versionName gAppVersionName + "-development"
        }
        staging {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig signingConfigs.debug

            versionName gAppVersionName + "-staging"
        }
        production {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig signingConfigs.release

            versionName gAppVersionName + "-production"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation project(':react-native-config')

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
